<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\Blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\Blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue May 14 19:15:06 2024
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[79]">OS_CPU_SR_Save</a>
 <LI><a href="#[7b]">OS_CPU_SR_Restore</a>
 <LI><a href="#[9c]">OSStartHighRdy</a>
 <LI><a href="#[80]">OSCtxSw</a>
 <LI><a href="#[99]">OSIntCtxSw</a>
 <LI><a href="#[8]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[23]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC0_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[24]">ADC1_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[25]">ADC2_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[29]">BTIM_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[2a]">CAN0_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[2b]">CAN1_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[2e]">DMA0_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[2f]">DMA1_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[30]">DMA2_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[31]">DMA3_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[32]">DMA4_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[33]">DMA5_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[34]">DMA6_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[35]">DMA7_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[10]">DT_QDU_IRQHandler</a> from main.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[f]">EXTI15_8_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[e]">EXTI7_0_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[a]">FCS_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[15]">FMS2_R_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[3b]">Keyboard_Key01</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[3c]">Keyboard_Key02</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[3d]">Keyboard_Key03</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[3e]">Keyboard_Key04</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[3f]">Keyboard_Key05</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[40]">Keyboard_Key06</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[41]">Keyboard_Key07</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[42]">Keyboard_Key11</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[43]">Keyboard_Key12</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[44]">Keyboard_Key13</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[45]">Keyboard_Key14</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[46]">Keyboard_Key15</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[47]">Keyboard_Key16</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[48]">Keyboard_Key17</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[49]">Keyboard_Key21</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[4a]">Keyboard_Key22</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[4b]">Keyboard_Key23</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[4c]">Keyboard_Key24</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[4d]">Keyboard_Key25</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[4e]">Keyboard_Key26</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[4f]">Keyboard_Key27</a> from key.o(.text) referenced from key.o(.constdata)
 <LI><a href="#[c]">LVD_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[58]">LedTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[11]">MFS0_R_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[12]">MFS0_TS_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[13]">MFS1_R_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[14]">MFS1_TS_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[16]">MFS2_TS_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[17]">MFS3_R_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[18]">MFS3_TS_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[19]">MFS4_R_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[1a]">MFS4_TS_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[1b]">MFS5_R_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[1c]">MFS5_TS_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[1d]">MFS6_R_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[1e]">MFS6_TS_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[1f]">MFS7_R_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[20]">MFS7_TS_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[26]">MFT_FRT_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[27]">MFT_IC_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[28]">MFT_OC_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[d]">MFT_WFG_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[22]">OSC_PLL_WCNT_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[39]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[8]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[9]">OS_CPU_SysTickHandler</a> from os_cpu_c.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[8a]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[85]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[21]">PPG_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[b]">SWWDT_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[37]">SystemInit</a> from system_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(.text)
 <LI><a href="#[55]">Task_Key</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[59]">Task_Start</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[2d]">USB_EP0_STA_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[2c]">USB_EP1_EP5_IRQHandler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mb9bf50x.o(.text) referenced from startup_mb9bf50x.o(RESET)
 <LI><a href="#[38]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mb9bf50x.o(.text)
 <LI><a href="#[3a]">_sputc</a> from printf3.o(i._sputc) referenced from printf3.o(i.__0sprintf$3)
 <LI><a href="#[36]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(.text)
</UL>
<P><STRONG><a name="[e1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[50]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[dd]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[e3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[e5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[e6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[53]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[23]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>BTIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXTI15_8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EXTI7_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FCS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>FMS2_R_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MFS0_R_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>MFS0_TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MFS1_R_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MFS1_TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>MFS2_TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>MFS3_R_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>MFS3_TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>MFS4_R_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>MFS4_TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>MFS5_R_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>MFS5_TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>MFS6_R_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>MFS6_TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>MFS7_R_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>MFS7_TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>MFT_FRT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MFT_IC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MFT_OC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MFT_WFG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>OSC_PLL_WCNT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PPG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SWWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>TIM_QPRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>USB_EP0_STA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USB_EP1_EP5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mb9bf50x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>NVIC_IntEnable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[e8]"></a>NVIC_IntDisable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>NVIC_ClrPend</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>NVIC_IntPri</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>DT_QDU_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DT_QDU_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_PWM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GetBaseClock</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetBaseClock
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[5f]"></a>InitLEDs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[5c]"></a>Init_LCD_IO</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[60]"></a>Init_Joy_IO</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[5e]"></a>DelayResolution100us</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayResolution100us
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[55]"></a>Task_Key</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Task_Key &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>LedTask</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = LedTask &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>Task_Start</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Task_Start &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayResolution100us
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Joy_IO
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LCD_IO
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLEDs
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBaseClock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_IntEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6d]"></a>Task_AD</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>

<P><STRONG><a name="[6e]"></a>LCD_stk_update</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display
</UL>

<P><STRONG><a name="[71]"></a>LCD_display</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearSCR
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_stk_update
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Monitor
</UL>

<P><STRONG><a name="[73]"></a>Get_OSSTK_Status</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Monitor
</UL>

<P><STRONG><a name="[75]"></a>Task_Monitor</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OSSTK_Status
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display
</UL>

<P><STRONG><a name="[eb]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, system_mb9bf50x.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>SystemInit</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, system_mb9bf50x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrtrimSet
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>OS_StrCopy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>

<P><STRONG><a name="[78]"></a>OSEventNameGet</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[7d]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>

<P><STRONG><a name="[7c]"></a>OSEventNameSet</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[83]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[7e]"></a>OS_Sched</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[82]"></a>OS_EventTaskWaitMulti</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[81]"></a>OSEventPendMulti</STRONG> (Thumb, 720 bytes, Stack size 64 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWaitMulti
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[84]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[85]"></a>OS_TaskStat</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>OS_TaskIdle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[6b]"></a>OSInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>OSIntExit</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[9a]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[9b]"></a>OSSchedUnlock</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[6c]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[9d]"></a>OSTimeTick</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[ed]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[a0]"></a>OS_EventTaskRemove</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[9f]"></a>OS_EventTaskRdy</STRONG> (Thumb, 178 bytes, Stack size 52 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
</UL>

<P><STRONG><a name="[bc]"></a>OS_EventTaskWait</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[b8]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[cb]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[a1]"></a>OS_TCBInit</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[97]"></a>OSDebugInit</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, os_dbg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[a4]"></a>OSFlagAccept</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[a5]"></a>OSFlagCreate</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[a7]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[a8]"></a>OSFlagDel</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[a9]"></a>OSFlagNameGet</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[aa]"></a>OSFlagNameSet</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ab]"></a>OSFlagPend</STRONG> (Thumb, 616 bytes, Stack size 72 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ad]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ae]"></a>OSFlagPost</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[af]"></a>OSFlagQuery</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[93]"></a>OS_FlagInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b0]"></a>OSMemCreate</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b1]"></a>OSMemGet</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b2]"></a>OSMemNameGet</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b3]"></a>OSMemNameSet</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b4]"></a>OSMemPut</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b5]"></a>OSMemQuery</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[94]"></a>OS_MemInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b6]"></a>OSQAccept</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b7]"></a>OSQCreate</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b9]"></a>OSQDel</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ba]"></a>OSQFlush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[bb]"></a>OSQPend</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[bd]"></a>OSQPendAbort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[be]"></a>OSQPost</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[bf]"></a>OSQPostFront</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c0]"></a>OSQPostOpt</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c1]"></a>OSQQuery</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[95]"></a>OS_QInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c2]"></a>OSTaskChangePrio</STRONG> (Thumb, 426 bytes, Stack size 64 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[67]"></a>OSTaskCreate</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[c4]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[68]"></a>OSTaskCreateExt</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[6a]"></a>OSTaskDel</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[c7]"></a>OSTaskDelReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c8]"></a>OSTaskNameGet</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[69]"></a>OSTaskNameSet</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[c9]"></a>OSTaskResume</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[74]"></a>OSTaskStkChk</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OSSTK_Status
</UL>

<P><STRONG><a name="[87]"></a>OSTaskSuspend</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[ca]"></a>OSTaskQuery</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[86]"></a>OSTimeDly</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
</UL>

<P><STRONG><a name="[57]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_AD
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTask
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Key
</UL>

<P><STRONG><a name="[cc]"></a>OSTimeDlyResume</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[76]"></a>OSTimeGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Monitor
</UL>

<P><STRONG><a name="[cd]"></a>OSTimeSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[90]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[96]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[a3]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[c6]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[8b]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[88]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[c3]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[39]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[9e]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[9]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[79]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[7b]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[9c]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[80]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[99]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[8]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mb9bf50x.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Sleep_Exit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Sleep_Enter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Power_Off
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Power_On
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillAll
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
</UL>

<P><STRONG><a name="[ce]"></a>LCD_WriteData</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdatePoint
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillAll
</UL>

<P><STRONG><a name="[d0]"></a>LCD_WriteCmd</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdatePoint
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Sleep_Exit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Sleep_Enter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Power_Off
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Power_On
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillAll
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
</UL>

<P><STRONG><a name="[d1]"></a>LCD_FillAll</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_FillAll &rArr; LCD_WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearSCR
</UL>

<P><STRONG><a name="[72]"></a>LCD_ClearSCR</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_ClearSCR &rArr; LCD_FillAll &rArr; LCD_WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillAll
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Key03
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Key02
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display
</UL>

<P><STRONG><a name="[d2]"></a>Power_Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
</UL>

<P><STRONG><a name="[d3]"></a>Reset_Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
</UL>

<P><STRONG><a name="[5d]"></a>LCD_Initialize</STRONG> (Thumb, 206 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Initialize &rArr; LCD_ClearSCR &rArr; LCD_FillAll &rArr; LCD_WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Delay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Delay
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[d4]"></a>LCD_Power_On</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[d5]"></a>LCD_Power_Off</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[d6]"></a>LCD_Sleep_Enter</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[d7]"></a>LCD_Sleep_Exit</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[d8]"></a>LCD_DisplayOn</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
</UL>

<P><STRONG><a name="[d9]"></a>LCD_DisplayOff</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
</UL>

<P><STRONG><a name="[da]"></a>LCD_UpdatePoint</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_UpdatePoint &rArr; LCD_WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutChar
</UL>

<P><STRONG><a name="[db]"></a>LCD_PutChar</STRONG> (Thumb, 304 bytes, Stack size 28 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_PutChar &rArr; LCD_UpdatePoint &rArr; LCD_WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdatePoint
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
</UL>

<P><STRONG><a name="[70]"></a>LCD_PutString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_PutString &rArr; LCD_PutChar &rArr; LCD_UpdatePoint &rArr; LCD_WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Key03
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Key02
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_stk_update
</UL>

<P><STRONG><a name="[62]"></a>Init_ADC</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[63]"></a>Init_PWM</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[54]"></a>Update_PWM</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DT_QDU_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>Keyboard_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[dc]"></a>Keyboard_Scan</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Exec
</UL>

<P><STRONG><a name="[56]"></a>Keyboard_Exec</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Keyboard_Exec
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Key
</UL>

<P><STRONG><a name="[3b]"></a>Keyboard_Key01</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>Keyboard_Key02</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Keyboard_Key02 &rArr; LCD_PutString &rArr; LCD_PutChar &rArr; LCD_UpdatePoint &rArr; LCD_WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearSCR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>Keyboard_Key03</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Keyboard_Key03 &rArr; LCD_PutString &rArr; LCD_PutChar &rArr; LCD_UpdatePoint &rArr; LCD_WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearSCR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>Keyboard_Key04</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>Keyboard_Key05</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>Keyboard_Key06</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>Keyboard_Key07</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>Keyboard_Key11</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>Keyboard_Key12</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>Keyboard_Key13</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>Keyboard_Key14</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>Keyboard_Key15</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>Keyboard_Key16</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>Keyboard_Key17</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>Keyboard_Key21</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>Keyboard_Key22</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>Keyboard_Key23</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>Keyboard_Key24</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>Keyboard_Key25</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>Keyboard_Key26</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>Keyboard_Key27</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_AD
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[51]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[ef]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__0sprintf$3</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f0]"></a>__1sprintf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)

<P><STRONG><a name="[6f]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_stk_update
</UL>

<P><STRONG><a name="[f1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[77]"></a>CrtrimSet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, system_mb9bf50x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7f]"></a>OS_SchedNew</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[89]"></a>OS_InitTaskStat</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[8c]"></a>OS_InitTaskIdle</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[8d]"></a>OS_InitEventList</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[8f]"></a>OS_InitTCBList</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[92]"></a>OS_InitRdyList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[91]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[a6]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[ac]"></a>OS_FlagBlock</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[df]"></a>_printf_core</STRONG> (Thumb, 436 bytes, Stack size 96 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
</UL>

<P><STRONG><a name="[3a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf3.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0sprintf$3)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
